# -*- coding: utf-8 -*-
"""Worksheet3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Usb9TbQnYQA3GqYsqEcI58QrvJYRg8rg
"""

import pandas as pd
import numpy as np

#3.1
import pandas as pd
Titanic_df = pd.read_csv("/content/drive/MyDrive/Krishika/Titanic-Dataset.csv")
Titanic_df.head()

fare_df = Titanic_df[['Fare']]
fare_df.head()

class_age_df = Titanic_df[['Pclass','Age']]
class_age_df.head()

survive_gender= Titanic_df[['Survived','Sex']]
survive_gender.head()

fare_gt_100 = Titanic_df[Titanic_df['Fare']>100]
fare_gt_100.head()

first_class = Titanic_df[Titanic_df['Pclass']==1]
first_class.head()

female_under_18 = Titanic_df[(Titanic_df['Sex']=='female') & (Titanic_df['Age']<18)]
female_under_18.head()

embarked_c_s = Titanic_df[(Titanic_df['Embarked']=='C') | (Titanic_df['Embarked']=='S')]
embarked_c_s.head()

first_second_class = Titanic_df[(Titanic_df['Pclass']==1) | (Titanic_df['Pclass']==2)]
first_second_class.head()

#3.2
fare_per_year = Titanic_df[['Fare','Age']]
fare_per_year.head()

high_fare_age =fare_per_year[fare_per_year['Fare']>5]
high_fare_age.head()

high_fare_age_srt = high_fare_age.sort_values(by="Age",ascending=False)
high_fare_age_srt.head()

result.info()

Titanic_df["fare_per_class"] = Titanic_df["Fare"] / Titanic_df["Pclass"] ;
Titanic_df.head()

adult_males = Titanic_df[(Titanic_df["Age"] > 18) & (Titanic_df["Sex"] == "male")]
adult_males.head()

adult_males_srt = adult_males.sort_values("fare_per_class",ascending=False)
adult_males_srt.head()

result  = adult_males_srt[["Name","Age","fare_per_class"]]
result.head()

result.info()

total_fare = Titanic_df["Fare"].sum()
total_fare

fclass_sum = first_class["Fare"].sum()
sclass_sum = Titanic_df[Titanic_df["Pclass"] == 2]["Fare"].sum()
tclass_sum = Titanic_df[Titanic_df["Pclass"] == 3]["Fare"].sum()
total_class_sum = fclass_sum + sclass_sum + tclass_sum
total_class_sum

list([fclass_sum , sclass_sum , tclass_sum])

fare_revenue_by_class = pd.Series([fclass_sum/total_class_sum , sclass_sum/total_class_sum  , tclass_sum/total_class_sum ],index=["First","Second","Third"])
fare_revenue_by_class

age_group = Titanic_df["Age"]
def encode_age(age):
    if age < 18:
        return 'Child'
    elif age > 18 and age < 65:
        return 'Adult'
    else :
      return 'senior'

Titanic_df['Age_Group'] = Titanic_df['Age'].apply(encode_age)
Titanic_df[['Age', 'Age_Group']].head()

Titanic_df[Titanic_df["Age_Group"] == "Adult"]["PassengerId"].count()

Titanic_df[Titanic_df["Age_Group"] == "Child"]["PassengerId"].count()

Titanic_df[Titanic_df["Age_Group"] == "senior"]["PassengerId"].count()

by_age_group = (Titanic_df.groupby("Age_Group")["PassengerId"].count() / 891 ) *100;
by_age_group